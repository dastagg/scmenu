#!/bin/bash
# A menu driven shell script to setup
# Source Code Version Control.
## ----------------------------------
# Step #1: Define variables
# ----------------------------------
RED='\033[0;41;30m'
STD='\033[0;0;39m'
FOSHOME="$HOME/dev/FOSSIL"
FOSIGNORE="$HOME/dev/FOSSIL/.fossil-settings"
FOSTICKET="$HOME/dev/FOSSIL/fossil-files/ticket.config"
# ----------------------------------
# Step #2: User defined function
# ----------------------------------
pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}

fossil-local(){
  echo "Project name must be lower case."
  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the Fossil repository
  fossil init "$FOSHOME/$PROJECT.fsl"
  fossil config import $FOSTICKET -R "$FOSHOME/$PROJECT.fsl"

  fossil open "$FOSHOME/$PROJECT.fsl"

  cp -r $FOSIGNORE .

  pause
}

git-local(){
  echo "This will initialize the git repository."
  echo "Add all the files,"
  echo "then Commit all the files using,"
  echo "'Initial Commit' as the commit message."

  # setup the Git repository
  git init 

  git add -A

  git commit -m "Initial Commit"

  pause
}

fossil-server(){
  echo "The default is in (), press Enter to accept."
  read -p "Enter the Fossil Host name (staggsystems.net): " ORIGIN
  ORIGIN=${ORIGIN:-staggsystems.net}

  read -p "Enter the Fossil repo password (password): " FPASSWORD
  FPASSWORD=${FPASSWORD:-password}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  read -p "Enter the local Fossil repo username (dastagg): " USERNAME
  USERNAME=${USERNAME:-dastagg}

  # setup the Fossil repository
  fossil clone -A $USERNAME "http://root:$FPASSWORD@$ORIGIN/cgi-bin/fossil/$PROJECT" "$FOSHOME/$PROJECT.fsl"

  fossil open "$FOSHOME/$PROJECT.fsl"

  pause
}

gitolite-mo(){
  echo "This version only pushes the master branch."
  read -p "Enter the Gitolite Host name (scm.dastagg.local): " ORIGIN
  ORIGIN=${ORIGIN:-scm.dastagg.local}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the Gitolite repository
  git remote add origin "$ORIGIN:$PROJECT.git"

  git push -u origin master

  pause
}

gitolite-md(){
  echo "Start in the master branch."
  echo "The default is in (), press Enter to accept."
  read -p "Enter the Gitolite Host name (scm.dastagg.local): " ORIGIN
  ORIGIN=${ORIGIN:-scm.dastagg.local}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the Gitolite repository
  git remote add origin "$ORIGIN:$PROJECT.git"

  # push master, switch to develop, push and switch back to master.
  git push -u origin master
  git checkout develop
  git push -u origin develop
  git checkout master

  pause
}

gitlab-mo() {
  echo "This version only pushes the master branch."
  echo "The default is in (), press Enter to accept."
  read -p "Enter the GitLab Host name (GLdastagg): " GITLAB
  GITLAB=${GITLAB:-GLdastagg}

  read -p "Enter the GitLab Userid (dastagg): " GLUSERNAME
  GLUSERNAME=${GLUSERNAME:-dastagg}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the GitLab repository
  git remote add gitlab $GITLAB:$GLUSERNAME/$PROJECT.git

  git push -u gitlab master

  pause
}

gitlab-md(){
  echo "Start in the master branch."
  echo "The default is in (), press Enter to accept."
  read -p "Enter the GitLab Host name (GLdastagg): " GITLAB
  GITLAB=${GITLAB:-GLdastagg}

  read -p "Enter the GitLab Userid (dastagg): " GLUSERNAME
  GLUSERNAME=${GLUSERNAME:-dastagg}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the GitLab repository
  git remote add gitlab $GITLAB:$GLUSERNAME/$PROJECT.git

  # push master, switch to develop, push and switch back to master.
  git push -u gitlab master
  git checkout develop
  git push -u gitlab develop
  git checkout master

  pause
}

bitbucket-mo(){
  echo "This version only pushes the master branch."
  echo "The default is in (), press Enter to accept."
  read -p "Enter the BitBucket Host name (BBdastagg): " BBUCKET
  BBUCKET=${BBUCKET:-BBdastagg}

  read -p "Enter the BitBucket Userid (dastagg): " BBUSERNAME
  BBUSERNAME=${BBUSERNAME:-dastagg}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the BitBucket repository
  git remote add bbucket $BBUCKET:$BBUSERNAME/$PROJECT.git

  git push -u bbucket master

  pause
}

bitbucket-md(){
  echo "Start in the master branch."
  echo "The default is in (), press Enter to accept."
  read -p "Enter the BitBucket Host name (BBdastagg): " BBUCKET
  BBUCKET=${BBUCKET:-BBdastagg}

  read -p "Enter the BitBucket Userid (dastagg): " BBUSERNAME
  BBUSERNAME=${BBUSERNAME:-dastagg}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the BitBucket repository
  git remote add bbucket $BBUCKET:$BBUSERNAME/$PROJECT.git

  # push master, switch to develop, push and switch back to master.
  git push -u bbucket master
  git checkout develop
  git push -u bbucket develop
  git checkout master

  pause
}

github-mo(){
  echo "This version only pushes the master branch."
  echo "The default is in (), press Enter to accept."
  read -p "Enter the Github Host name (GHdastagg): " GITHUB
  GITHUB=${GITHUB:-GHdastagg}

  read -p "Enter the Github Userid (dastagg): " GHUSERNAME
  GHUSERNAME=${GHUSERNAME:-dastagg}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the Github repository
  git remote add github $GITHUB:$GHUSERNAME/$PROJECT.git

  git push -u github master

  pause
}

github-md(){
  echo "Start in the master branch."
  echo "The default is in (), press Enter to accept."
  read -p "Enter the Github Host name (GHdastagg): " GITHUB
  GITHUB=${GITHUB:-GHdastagg}

  read -p "Enter the Github Userid (dastagg): " GHUSERNAME
  GHUSERNAME=${GHUSERNAME:-dastagg}

  echo -n "Enter the project name: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Project name cannot be blank!"
    exit
  fi

  # setup the Github repository
  git remote add github $GITHUB:$GHUSERNAME/$PROJECT.git

  # push master, switch to develop, push and switch back to master.
  git push -u github master
  git checkout develop
  git push -u github develop
  git checkout master

  pause
}


upstream(){
  echo "This will add a repository as an upstream remote"
  echo "Paste (or type) the repository that you forked from."
  echo "Dont forget to include the .git at the end!"

  echo -n "Enter the upstream repository: "
  read -e PROJECT

  if [ -z "$PROJECT" ]; then
    echo "Repository name cannot be blank!"
    exit
  fi

  # setup the upstream repository
  git remote add upstream $PROJECT

  pause
}


# function to display menus
show_menus() {
  clear
  echo "~~~~~~~~~~~~~~~~~~~~~"
  echo " Source Control Menu "
  echo "~~~~~~~~~~~~~~~~~~~~~"
  echo ""
  echo "For Git repositories:"
  echo "It does assume that for Remote Git repositories, an empty remote repository has already been created."
  echo ""
  echo "For Fossil repositories:"
  echo "It does assume that the Fossil repository has been moved to the server"
  echo "This will clone it and create the link to the local repository located in $HOME/dev/.FOSSIL."
  echo ""
  echo "Note: You can use this to setup multiple repositories."
  echo "      BUT: Setup the primary Git repository last!"
  echo "~~~~~~~~~~~~~~~~~~~~~"
  echo ""
  echo "Internal ---"
  echo "  f - Setup Fossil Local"
  echo "  g - Setup Git Local"
  echo ""
  echo "External ---"
  echo "  F - Setup Fossil Remote"
  echo "  Gm - Setup Gitolite - master branch only"
  echo "  Gd - Setup Gitolite - master/develop branches"
  echo ""
  echo "GitHub ---"
  echo "  Hm - Setup GitHub - master branch only"
  echo "  Hd - Setup GitHub - master/develop branches"
  echo "GitLab ---"
  echo "  Lm - Setup GitLab - master branch only"
  echo "  Ld - Setup GitLab - master/develop branches"
  echo "BitBucket ---"
  echo "  Bm - Setup Bitbucket - master branch only"
  echo "  Bd - Setup Bitbucket - master/develop branches"
  echo ""
  echo "Upstream Repository ---"
  echo "  U - Setup a Git upstream repo"
  echo ""
  echo "Get me out of here! ---"
  echo "  0 (<- zero) - Exit"
}
# read input from the keyboard and take a action
# invoke the one() when the user selects 1 from the menu option ... etc.
# Exit when the user selects 0 from the menu option.
# Display an error message if the user selects anything else.
read_options() {
  local choice
  read -p "Enter choice " choice
  case $choice in
    f) fossil-local ;;
    g) git-local ;;
    F) fossil-server ;;
    Gm) gitolite-mo ;;
    Gd) gitolite-md ;;
    Hm) github-mo ;;
    Hd) github-md ;;
    Lm) gitlab-mo ;;
    Ld) gitlab-md ;;
    Bm) bitbucket-mo ;;
    Bd) bitbucket-md ;;
    U) upstream ;;
    0) exit 0 ;;
    *) echo -e "${RED}Error...${STD}" && sleep 2
  esac
}

# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP

# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------
while true
do
  show_menus
  read_options
done
